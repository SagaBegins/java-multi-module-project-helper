#!/bin/bash
########################################################################
#Script Name    : java-helper.rc
#Args           : [-n|--no-info] [-v|--vpn] [-c|--chdir] [-p|--custom-ps1]                                           
#Description    : Helper file for java project with many sub projects
#Author         : Vidya Sagar J 
#GitHub         : @sagabegins
########################################################################

# TODO Add functionality to use files(<project_name>.<go|py|js>project or .project with details of project name) which help with scanning other projects.
# TODO Rework build functions to support all tasks using project names.

# -n|--no-info      : Does not print helper info.
# -v|--vpn          : Connects to openvpn server.
# -c|--chdir        : Changes directory to Base of project.
# -p|--custom-ps1   : Uses custom ps1

# Add '. <path to helper> [options]' or 'source <path to helper> [options]'
# to .bashrc below the interactivity check. 
# It is not recommended to use -c|--chdir option when putting it there, as it always will start at base directory.
# If you want to use a custom ps1 place it below PS1 in bashrc

# Add all the needed variables to run projects in .project_config after it has been 
# created by this script.

HELPER_SOURCE=${BASH_SOURCE[0]}

# Will always be int. When string is assigned value becomes 0
declare -i vpn info chdir_to_base iap gerrit_visibility open_jacoco

# Declaring array of projects and code_files
declare -A projects code_files

vpn=0
info=1
custom_ps1=0
open_jacoco=0
chdir_to_base=0
gerrit_visibility=1

# Initializing colors
GREEN=`tput setaf 2`
WHITE=`tput setaf 7`
DEFAULT=`tput sgr0`
BLUE=`tput setaf 4`
BG_BLACK=`tput setab 0`

# Parsing options
while (( $# ))
do
	case $1 in
		-n|--no-info)
				info=0
				;;
		-v|--vpn)
				vpn=1
				;;
		-c|--chdir)
				chdir_to_base=1
				;;
		-p|--custom-ps1)
				custom_ps1=1
				;;
		*)
				# Ignore invalid options
				;;
	esac
	shift
done

#-----------------------------------------------------

# Appending previous history
history -a

# REMOVE THIS IF YOU WANT TO USE THIS TO USE DEFAULT PS1 WHEN RUNNING source command OR add '. <path to helper> [--no-info|n]'
# or 'source <path to helper> [--no-info|n] [-v|--vpn]' to .bashrc below the interactivity check. If you want to use a custom ps1
# place it below PS1 in bashrc
if  (( $custom_ps1 ))
then
	PS1="${GREEN}java-helper:${BLUE}\w${GREEN}${DEFAULT}> "
fi

#---------------------------------------------------------------------

# Default browser for opening jacoco index.html
BROWSER="google-chrome"

#######################################
# Prompts user to assign values to vars and saves it in ~/.project_config.
# GLOBALS:
#	BASE_PROJECT_FOLDER     : Base of the multi-project directory  
#	BASE_PROJECT_NAME       : Name of the multi-project
#	VPN_CONFIG_FOLDER       : Path to vpn configuration
#	VPN_FILE_NAME           : Name of the VPN file
#	JACOCO_PATH             : Path to Jacoco files
#	CHECKSTYLE_PATH         : Path to checkstyle files
#	PUSH_MESSAGE_VALIDATION : To validate if push message contains required pattern
# ARGUMENTS:
#	NONE
#######################################
function config_wizard {

	local vars

	# For getting env input on first run
	# Add or remove variables to customize config wizard
	vars=(BASE_PROJECT_FOLDER VPN_CONFIG_FOLDER BASE_PROJECT_NAME VPN_FILE_NAME JACOCO_PATH CHECKSTYLE_PATH PUSH_MESSAGE_VALIDATION)
	BASE_PROJECT_FOLDER="$HOME/Desktop/project"
	VPN_CONFIG_FOLDER="$HOME/.openvpn/Dev-VPN"
	BASE_PROJECT_NAME="base"
	VPN_FILE_NAME="vpn_file"
	JACOCO_PATH="build/jacocoHtml/index.html"
	CHECKSTYLE_PATH="build/reports/checkstyle/test.html"
	PUSH_MESSAGE_VALIDATION="Task #[0-9]{5,}"

	for var in "${vars[@]}"
	do
		read -ep "Enter prefered $var (Default ${!var}): " value
		if [[ $value == '' ]]
		then
				value=${!var}
		fi

		echo "export ${var}='${value}'" >> "$HOME/.project_config"
	done

	echo ""
	# echo "export HISTFILE=$HOME/.project_history" >> $HOME/.project_config
}

# Create config if it doesn't exist 
if [[ ! -f $HOME/.project_config ]]
then
	config_wizard
fi

# importing variables from the config file
. "$HOME/.project_config"

if (( chdir_to_base ))
then
	cd "$BASE_PROJECT_FOLDER"
fi

#######################################
# Exports valid project names obtained from settings.gradle.
# GLOBALS:
#	projects : Associative array with the names and path of all sub-projects
# ARGUMENTS:
#	NONE
#######################################
function export_project_names_from_settings {

	local project_name project_names project_path prev_ifs
	
	prev_ifs=$IFS
	IFS=$'\n'
	project_names=(`grep '=' "$BASE_PROJECT_FOLDER/settings.gradle"`)
	IFS=$prev_ifs
	i=0
	
	projects[$BASE_PROJECT_NAME]=''
	
	for project_name in "${project_names[@]}"
	do
		# Preprocessing
		project_name=${project_name//\'/}
		project_name=${project_name//project(:/}
		project_name=${project_name//).projectDir/}
		project_name=${project_name// as File/}
		project_name=${project_name//\"/}
		project_name=(${project_name// = / })
		project_path=${project_name[1]}
		project_name=${project_name[0]}
		project_path=${project_path//\$rootDir\//}
		
		if [[ -f "$BASE_PROJECT_FOLDER/$project_path/build.gradle" ]] 
		then
			extract_name_from_project $project_name		
			projects[$PROJECT_NAME]=$project_path
		fi
	done
}

#######################################
# Extracts concise project name from full project name.
# GLOBALS:
#	projects            : Associative array with the names and path of all sub-projects
# ARGUMENTS:
#	full_project_name   : Full project name. Position [1].
# RETURN:
#	EXTRACTED_NAME      : Extracted project name
#######################################
function extract_name_from_project {

	local project_name ind full_project_name name
	
	# Extracting project name from full project name
	full_project_name=$1
	name=${full_project_name//\-/_}
	split_name=(${name//:/ })
	
	name=${split_name[-1]}
	ind=$((${#split_name[@]}-1))
	
	for project_name in "${!projects[@]}"
	do
		while [[ $name =~ ^$name$ && $ind -gt -1 ]]
		do
				((--ind))
				name="${split_name[ind]:+"${split_name[ind]}_"}$name"
		done
	done

	# Add conditions if needed.
	# Example
	# if [[ "$name" == 'some_worker' || "$name" == 'other_worker' ]]
	# then
	# 	# splitting at _
	# 	name=(${name[@]/_/ })
			
	# 	name="${name}_discovery_worker"
	# fi
	
	EXTRACTED_NAME=$name
}

#######################################
# Obtains project names from path.
# GLOBALS:
#	projects       : Associative array with the names and path of all sub-projects
# ARGUMENTS:
#	full_path      : Full path to the project. Position [1]
# RETURN:
#	EXTRACTED_NAME : Extracted project name
#######################################
function extract_name {

	local full_path name project_name

	# # Add conditionals like this if necessary
	if [[ "$1" == '' ]]
	then
		EXTRACTED_NAME="base_project"
		return
	fi

	full_path=$1

	# Replacing all - with _
	full_path=${full_path//\-/_}

	# Splitting into array using / as delimiter.
	full_path=(${full_path//\// })

	# Setting name to last value in array
	name=${full_path[-1]}

	# Getting length of the array
	len=${#full_path[@]}
	ind=$((len-1))

	for project_name in "${!projects[@]}"
	do
		while [[ ${project_name} =~ ^$name$ && $ind -gt -1 ]]
		do
			((--ind))
			name="${full_path[ind]:+"${full_path[ind]}_"}$name"
		done
	done

	EXTRACTED_NAME=$name
}

#######################################
# Finds sub projects and exports variables with the name.
# GLOBALS:
#	projects            : Associative array with the names and path of all sub-projects
#	BASE_PROJECT_FOLDER : Base of the multi-project directory  
# ARGUMENTS:
#	NONE
#######################################
function find_sub_project_folders {

	local ind folder

	unset projects
	declare -g -A projects

	old_pwd=$(pwd)
	cd "$BASE_PROJECT_FOLDER"
	ind=0
	
	while read -e folder
	do
		# Removing base incase it is changed
		path=${folder/"$BASE_PROJECT_FOLDER"/}
		path="${path/build.gradle/}"
		name="$path"
		
		extract_name $name
		projects[$EXTRACTED_NAME]=$path

	done < <(find "$BASE_PROJECT_FOLDER" -iname build.gradle)

	cd $old_pwd
}

#######################################
# Opens code file in visual studio code.
# GLOBALS:
#	code_files  : Associative array with the names and path of all code files in the current sub-project
# ARGUMENTS:
#	file_name   : Name of the file to open
#######################################
function open_code_file {
	# TODO: Add support for go to line
	# TODO: add support to use any IDE
	local file_name files_to_open

	while (( $# ))
	do
		case $1 in
			*)
				file_name=${1//\.java/}
				files_to_open+=(${code_files[$file_name]})
				;;
		esac
		shift
	done

	code "${files_to_open[*]}"
}

#######################################
# Scans the current directory and it sub-directories for .java files.
# GLOBALS:
#	code_files  : Associative array with the names and path of all code files in the current sub-project
# ARGUMENTS:
#	NONE
#######################################
function scan_code {
	local code_file_path code_file_name
	
	while read -e code_file_path
	do
		code_file_name=${code_file_path//\./}
		code_file_name=(${code_file_name//\// })
		code_file_name=${code_file_name[-1]}
		code_file_name=${code_file_name//\.java/}

	code_files[$code_file_name]=$code_file_path
	done < <(find . -iname "*.java")

	complete -W "${!code_files[*]}" open_code_file
}

# finding all the project sub folders with build.gradle
find_sub_project_folders

# Some constant commands
PROJECT_GRADLEW="$BASE_PROJECT_FOLDER/gradlew"
BOOT_RUN_COMMAND="$BASE_PROJECT_FOLDER/gradlew bootrun"
BUILD_COMMAND="$BASE_PROJECT_FOLDER/gradlew clean g build"
GIT_PUSH="git push origin HEAD:refs/for/master"

# Aliases
alias pgradlew="$BASE_PROJECT_FOLDER/gradlew"
alias bootrun=btrun
alias gbuild=gbld
alias build=bld
alias conn_vpn=connect_vpn
alias dc_vpn=disconnect_vpn
alias git_push=$GIT_PUSH
alias git_push_private=$GIT_PUSH%private
alias pcd=chdir
alias test_projects=check_projects
alias reconnect_vpn=reload_vpn

# TODO: Create functions for tab completion
# Adding tab completion
complete -W "${!projects[*]} -t --new-tab" bootrun btrun show_folder
complete -W "${!projects[*]} -t --new-tab -o --open-jacoco -n --no-jacoco" gbld gbuild bld build
complete -W "-m --message -b --build -s --status" push_to_gerrit
complete -W "${!projects[*]}" trigger_pubsub show_checkstyle pcd show_jacoco
complete -W "${go_projects[*]} ${!projects[*]}" chdir
#--------------------------------------------

#######################################
# Launches the browser with jacoco html of the specified project. If no project
# current directory is used as the project. 
# GLOBALS:
#	projects        : Associative array with the names and path of all sub-projects 
# ARGUMENTS:
#	proj            : Name of the project. Position Any. Optional.
#	open_browser    : Overrides open_jacoco set value. Position Any. Optional. Value: [0-9]* 
#	[-h|--help]     : Prints the usage
#######################################
function show_jacoco {

	local curr_dir proj tab_title open_browser

	open_browser=$open_jacoco
	proj=''
	curr_dir=$(pwd)

	while (( $# ))
	do
		case $1 in
			-h|--help)
				echo "Is used to launch jacoco test coverage index file of project. Use tab completion to see valid list of arguments."
				echo "Usage: ${GREEN}${FUNCNAME[0]} ${BLUE}<project-name>${DEFAULT}"
				return
				;;
			[0-9]*)
				open_browser=$1
				;;
			*)
				proj=$1
				;;
		esac
		shift
	done
	
	if (( open_browser ))
	then
			if [[ $proj == '' ]]
			then
					$BROWSER ${curr_dir}/${JACOCO_PATH} &> /dev/null & 
					disown
					echo ""
			else
					$BROWSER "$BASE_PROJECT_FOLDER${projects[$proj]}/${JACOCO_PATH}" &> /dev/null & 
					disown
					echo ""
			fi
	fi

	cd $curr_dir
}

# TODO: Add option to open checkstyle main html
#######################################
# Launches the browser with checkstyle test html.
# GLOBALS:
#	projects        : Associative array with the names and path of all sub-projects 
# ARGUMENTS:
#	proj            : Name of the project. Position Any. Optional.
#	[-h|--help]     : Prints the usage
#######################################
function show_checkstyle {
	
	local proj
	
	curr_dir=$(pwd)
	
	while (( $# ))
	do
		case $1 in
			-h|--help)
				echo "Usage: ${GREEN}${FUNCNAME[0]} ${BLUE}[-h|--help] <project_name>${DEFAULT}"
				;;
			*)
				proj=$1
				;;
		esac
		shift
	done
	
	if [[ $proj == '' ]]
	then
		$BROWSER ${curr_dir}/${CHECKSTYLE_PATH} &> /dev/null & 
		disown
		echo ""
	else
		$BROWSER "$BASE_PROJECT_FOLDER${projects[$proj]}/${CHECKSTYLE_PATH}" &> /dev/null & 
		disown
		echo ""
	fi
}

#######################################
# Changes directory to the specified project and executes the BOOT_RUN_COMMAND command. 
# If no project name is provided, runs the command in the current directory.
# GLOBALS:
#	projects         : Associative array with the names and path of all sub-projects
#	BOOT_RUN_COMMAND : Variable storing the bootRun command for the project 
# ARGUMENTS:
#	proj             : Name of the project. Position Any. Optional.
#	[-h|--help]      : Prints the usage.
#	[-t|--new-tab]   : Bootruns the given project in a new terminal tab.
#######################################
function btrun {

	local curr_dir new_tab proj tab_title

	proj=''
	new_tab=0
	curr_dir=$(pwd)

	while (( $# ))
	do
		case $1 in
			-h|--help)
				echo "Usage: ${GREEN}${FUNCNAME[0]} ${BLUE}<project-name>${DEFAULT} ${GREEN}[--new-tab]${DEFAULT}."
				echo "--new-tab runs the command in a new terminal tab"
				return
				;;
			-t|--new-tab)
				new_tab=1
				;;
			*)
				proj=$1
				;;
		esac
		shift
	done

	if (( new_tab ))
	then
		if [[ $proj == '' ]]
		then
			tab_title=$curr_dir
		else
			tab_title=$proj
		fi
		gnome-terminal --tab --title="$proj" -- /bin/bash -c ". $HELPER_SOURCE --no-info && btrun $proj && read -p '${GREEN}Press Enter or ctrl-c to exit. Closes all related child windows too.'"
	else
		if [[ "$proj" != '' ]]
		then
			cd "$BASE_PROJECT_FOLDER${projects[$proj]}"
		fi

		$BOOT_RUN_COMMAND
	fi

	cd $curr_dir
}

#######################################
# Changes directory to the specified project and executes the BUILD_COMMAND. 
# If no project name is provided, runs the command in the current directory.
# GLOBALS:
#	projects           : Associative array with the names and path of all sub-projects
#	BUILD_COMMAND      : Variable storing the command with tasks clean g build command for the project 
# ARGUMENTS:
#   proj               : Name of the project. Position Any. Optional.
#	open_browser       : Overrides open_jacoco set value. Position Any. Optional. Value: [0-9]*
#	[-h|--help]        : Prints the usage.
#	[-t|--new-tab]     : Bootruns the given project in a new terminal tab.
#	[-o|--open-jacoco] : Overrides open_jacoco set value. Opens jacoco html after successfully building.
#	[-n|--no-jacoco]   : Overrides open_jacoco set value. Does not open jacoco html.
#######################################
function gbld {

	local curr_dir new_tab proj tab_title override_open_jacoco

	override_open_jacoco=$open_jacoco
	proj=''
	new_tab=0
	curr_dir=$(pwd)

	while (( $# ))
	do
		case $1 in
			-h|--help)
				echo "Usage: ${GREEN}${FUNCNAME[0]} ${BLUE}<project-name>${DEFAULT} ${GREEN}[--new-tab]${DEFAULT}."
				echo "--new-tab runs the command in a new terminal tab"
				return
				;;
			-t|--new-tab)
				new_tab=1
				;;
			-o|--open-jacoco)
				override_open_jacoco=1
				;;
			-n|--no-jacoco)
				override_open_jacoco=0
				;;
			[0-9]*)
				override_open_jacoco=$1
				;;
			*)
				proj=$1
				;;
		esac
		shift
	done

	if (( new_tab ))
	then
			if [[ $proj == '' ]]
			then
					tab_title=$curr_dir
			else
					tab_title=$proj
			fi
			gnome-terminal --tab --title="$tab_title" -- /bin/bash -c ". $HELPER_SOURCE --no-info && gbld $proj $override_open_jacoco && read -p '${GREEN}Press Enter or ctrl-c to exit. Closes all related child windows too.'"
	else
			if [[ "$proj" != '' ]]
			then
					cd "$BASE_PROJECT_FOLDER${projects[$proj]}"
			fi

			${BUILD_COMMAND} && show_jacoco $proj $override_open_jacoco
	fi

	cd $curr_dir
}

#######################################
# Changes directory to the specified project and builds it with tasks clean build. 
# If no project name is provided, runs the command in the current directory.
# GLOBALS:
#	projects           : Associative array with the names and path of all sub-projects
#	PROJECT_GRADLEW    : Variable storing the wrapper of the base project 
# ARGUMENTS:
#	proj               : Name of the project. Position Any. Optional.
#	open_browser       : Overrides open_jacoco set value. Position Any. Optional. Value: [0-9]*
#	[-h|--help]        : Prints the usage.
#	[-t|--new-tab]     : Bootruns the given project in a new terminal tab.
#	[-o|--open-jacoco] : Overrides open_jacoco set value. Opens jacoco html after successfully building.
#	[-n|--no-jacoco]   : Overrides open_jacoco set value. Does not open jacoco html.
#######################################
function bld {

	local curr_dir new_tab proj tab_title override_open_jacoco
	
	override_open_jacoco=$open_jacoco
	proj=''
	new_tab=0
	curr_dir=$(pwd)

	while (( $# ))
	do
		case $1 in
			-h|--help)
				echo "Usage: ${GREEN}${FUNCNAME[0]} ${BLUE}<project-name>${DEFAULT} ${GREEN}[--new-tab]${DEFAULT}."
				echo "--new-tab runs the command in a new terminal tab"
				return
				;;
			-t|--new-tab)
				new_tab=1
				;;
			-o|--open-jacoco)
				override_open_jacoco=1
				;;
			-n|--no-jacoco)
				override_open_jacoco=0
				;;
			[0-9]*)
				override_open_jacoco=$1
				;;
			*)
				proj=$1
				;;
		esac
		shift
	done

	if (( new_tab ))
	then
			if [[ $proj == '' ]]
			then
					tab_title=$curr_dir
			else
					tab_title=$proj
			fi
			gnome-terminal --tab --title="$tab_title" -- /bin/bash -c ". $HELPER_SOURCE --no-info && bld $proj $override_open_jacoco && read -p '${GREEN}Press Enter or ctrl-c to exit.'"
	else
			if [[ "$proj" != '' ]]
			then
					cd "$BASE_PROJECT_FOLDER${projects[$proj]}"
			fi

			$PROJECT_GRADLEW clean build && show_jacoco $proj $override_open_jacoco
	fi

	cd $curr_dir
}

#######################################
# Changes directory to the specified project name. 
# If no value is provided changes directory to BASE_PROJECT_FOLDER.
# GLOBALS:
#	projects             : Associative array with the names and path of all sub-projects
#	$BASE_PROJECT_FOLDER : Variable storing the path to the multi-module-project
# ARGUMENTS:
#   $1                   : Name of the project. Position 1. Optional.
#######################################
function chdir {

	local curr_wd

	curr_wd=$(pwd)

	if [[ "$1" == '' ]]
	then
		cd "$BASE_PROJECT_FOLDER"
	else
		cd "$BASE_PROJECT_FOLDER${projects[$1]}"
	fi

	if [[ $(pwd) != $BASE_PROJECT_FOLDER ]]
	then
		scan_code
	fi
}

#######################################
# Writes some info about the commands present.
# GLOBALS:
#	NONE
# ARGUMENTS:
#	NONE
#######################################
function helper_info {

	echo ""
	echo ""
	echo "  ${GREEN}################################### ${BLUE} PROJECT HELPER ${GREEN} ###################################${DEFAULT}"
	echo ""
	echo "  * ${BLUE}<command>${DEFAULT} ${GREEN}<tab><tab>${DEFAULT} to get valid ${BLUE}<project_name>${DEFAULT}."
	echo "  * ${GREEN}chdir${DEFAULT} ${BLUE}<project_name>${DEFAULT} can be used for easily navigating between projects."
	echo "  * ${GREEN}pgradlew${DEFAULT} can be used instead ${GREEN}$BASE_PROJECT_FOLDER/gradlew${DEFAULT}."
	echo "  * (${GREEN}btrun${DEFAULT} or ${GREEN}bootrun${DEFAULT}) ${BLUE}<project_name> [--new-tab]${DEFAULT} can be used instead of ${GREEN}${BOOT_RUN_COMMAND}${DEFAULT}."
	echo "  * (${GREEN}gbld${DEFAULT} or ${GREEN}gbuild${DEFAULT}) ${BLUE}<project_name> [--new-tab] [0|1]${DEFAULT} can be used instead of ${GREEN}${BUILD_COMMAND}${DEFAULT}."
	echo "  * (${GREEN}bld${DEFAULT} or ${GREEN}build${DEFAULT}) ${BLUE}<project_name> [--new-tab] [0|1]${DEFAULT} can be used instead of ${GREEN}$BASE_PROJECT_FOLDER/gradlew clean build${DEFAULT}."
	echo "  * ${GREEN}chdir${DEFAULT}, ${GREEN}btrun${DEFAULT}, ${GREEN}bootrun${DEFAULT}, ${GREEN}gbld${DEFAULT}, ${GREEN}bld${DEFAULT} and ${GREEN}gbuild${DEFAULT} take in an argument. Valid arguments are listed in the tab completion. If argument is empty it will run the current directory."
	echo "  * ${GREEN}clear_with_info${DEFAULT} can be used to clear the shell and print these messages."
	echo "  * ${GREEN}push_to_gerrit${DEFAULT} ${BLUE}[-b|--build] [-s|--status] ([-m|--message] <commit-msg>)${DEFAULT} can be used to commit and push changes."
	echo "  * ${GREEN}show_jacoco${DEFAULT} ${BLUE}<project_name>${DEFAULT} can be used to open jacoco test coverage index.html for the selected project."
	echo "  * ${GREEN}show_folder${DEFAULT} can be used to show the path of <project_name> from base."
	echo "  * ${GREEN}edit_config${DEFAULT} can be used to open the .project_config file in gedit. Add needed export variables to .project_config."
	gerrit_branch_visibility
	open_jacoco_status

	echo ""
	echo ""
}

#######################################
# Prints the status of gerrit_visibility.
# GLOBALS:
#	NONE
# ARGUMENTS:
#	NONE
#######################################
function gerrit_branch_visibility {
	if [[ $gerrit_visibility -eq 0 ]]
	then
		echo "  * Your commits are private. Change it to 1 to make it public."
	else
		echo "  * Your commits are public. Change it to 0 to make it private."
	fi

	echo "  * ${GREEN}toggle_gerrit_visibility${DEFAULT} can be used to toggle ${BLUE}Gerrit visibilty's${DEFAULT} state"
}

#######################################
# Prints the status of open_jacoco.
# GLOBALS:
#	NONE
# ARGUMENTS:
#	NONE
#######################################
function open_jacoco_status {
	if [[ $open_jacoco -eq 0 ]]
	then
		echo "  * Jacoco index.html will not be opened when ${GREEN}bootrun, btrun, gbuild, bld, gbld${DEFAULT} or ${GREEN}build${DEFAULT} are run. Change it to 1 to open when run."
	else
		echo "  * Jacoco index.html will be opened. Change it to 0 to launch it when project is finished building."
	fi

	echo "  * ${GREEN}toggle_open_jacoco${DEFAULT} can be used to toggle ${BLUE}open_jacoco's${DEFAULT} state."
}

#######################################
# Toggles the gerrit_visibility variable.
# GLOBALS:
#	NONE
# ARGUMENTS:
#	NONE
#######################################
function toggle_gerrit_visibility {
	if [[ ! ($gerrit_visibility -eq 0) ]]
	then
		gerrit_visibility=0
		echo "  * gerrit_visibility set to 0. Your commits are public."
	else
		gerrit_visibility=1
		echo "  * gerrit_visibility set to 1. Your commits are private."
	fi
}

#######################################
# Toggles the open jacoco variable.
# GLOBALS:
#	NONE
# ARGUMENTS:
#	NONE
#######################################
function toggle_open_jacoco {
	if [[ ! ($open_jacoco -eq 0) ]]
	then
		open_jacoco=0
		echo "  * open_jacoco set to 0. Jacoco index.html will not open in browser."
	else
		open_jacoco=1
		echo "  * open_jacoco set to 1. Jacoco index.html will open after the build ends."
	fi
}

#######################################
# Tests if the changes build succesfully.
# GLOBALS:
#	projects             : Associative array with the names and path of all sub-projects
#	BASE_PROJECT_FOLDER  : Variable storing the path to the multi-module-project
# ARGUMENTS:
#	NONE
#######################################
function test_projects {
	# TODO test function
	old_pwd=$(pwd)
	cd "$BASE_PROJECT_FOLDER"
	status=$(git status)

	if [[ "$status" =~ 'nothing to commit' ]]
	then
		echo $status
		return
	fi

	for project in "${!projects[@]}"
	do
		project="${project// /}"

		if [[ "$project" != $BASE_PROJECT_NAME && "$status" =~ "${projects[$project]/\//}" ]]
		then
			echo "Checking $project"
			cd "$BASE_PROJECT_FOLDER${projects[$project]}"
			
			if [[ `cat build.gradle` =~ "googleJavaFormat" ]]
			then
				pgradlew clean g build > /dev/null
			else
				pgradlew clean build > /dev/null
			fi

			if [[ $? -gt 0 ]]
			then
				echo "Please fix the errors."
				return 1
			fi
		fi
	done
}


#######################################
# Commits all changes and pushes to gerrit. Builds all the projects with changes and checks for failure.
# GLOBALS:
#	projects                 : Associative array with the names and path of all sub-projects
#	BASE_PROJECT_FOLDER      : Variable storing the path to the multi-module-project
# ARGUMENTS:
#	[-b|--build]             : Builds the project and pushes to gerrit if build is successful.
#	[-s|--status]            : Checks if there are any changes that need to be commited and pushed.
#	[-m|--message] <message> : Pushes with commit message `message`.
#	[-p|--private]           : Overrides gerrit_visibility. Will make the branch private.
#######################################
function push_to_gerrit {
	# TODO Move the checking to a separate function.
	# TODO test function
	local built status_check build_check message override_gerrit_visibility

	override_gerrit_visibility=$gerrit_visibility
	message=''
	build_check=0
	status_check=0

	while (( $# ))
	do
		case $1 in
			-h|--help)
				echo "	Usage: ${GREEN}${FUNCNAME[0]} ${BLUE}[options]${DEFAULT}."
				echo "	Options:"
				echo "		[-b|--build]             : Builds the project and pushes to gerrit if build is successful."
				echo "		[-s|--status]            : Checks if there are any changes that need to be commited and pushed."
				echo "		[-m|--message] <message> : Pushes with commit message `message`."
				echo "		[-p|--private]           : Overrides gerrit_visibility. Will make the branch private."
				return
				;;
			-b|--build)
				build_check=1
				;;
			-s|--status)
				status_check=1
				;;
			-m|--message)
				message=$2
				shift
				;;
			-p|--private)
				override_gerrit_visibility=1
				;;
			*)
				built=0
				;;
		esac
		shift
	done

	old_pwd=$(pwd)
	cd "$BASE_PROJECT_FOLDER"

	status=$(git status)

	if (( $status_check )) && [[ "$status" =~ 'nothing to commit' ]]
	then
		echo $status
		return
	fi

	if (( $build_check ))
	then
		built=0

		for project in "${!projects[@]}"
		do
			project="${project// /}"

			if [[ "$project" != $BASE_PROJECT_NAME && "$status" =~ ${projects[$project]/\//} ]]
			then
				echo "Checking $project"
				cd "$BASE_PROJECT_FOLDER${!project}"

				((++built))

				# TODO Change grep command instead
				# grep "googleJavaFormat" build.gradle
				if [[ `cat build.gradle` =~ "googleJavaFormat" ]]
				then
					pgradlew clean g build > /dev/null
				else
					pgradlew clean build > /dev/null
				fi

				if [[ $? -gt 0 ]]
				then
					echo "Please fix the errors in $project."
					cd $old_pwd
					return 1
				fi
			fi
		done

		echo "Build check successful."
	fi
	
	if [[ $message != '' && ! ($message =~ $PUSH_MESSAGE_VALIDATION) ]]
	then 
		echo "Please add task number to the commit msg."
		return 1
	fi

	if [[ $message == '' ]]
	then
		cd "$BASE_PROJECT_FOLDER" && git add -A && git commit --amend --no-edit
	else
		cd "$BASE_PROJECT_FOLDER" && git add -A && git commit -m $message
	fi

	if (( $override_gerrit_visibility ))
	then
		$GIT_PUSH
	else
		$GIT_PUSH%private
	fi

	cd $old_pwd
}

 
#######################################
# Disconnects the vpn by killing it.
# GLOBALS:
#	NONE
# ARGUMENTS:
#	NONE
#######################################
function disconnect_vpn {
	pgrep -f openvpn | sudo xargs kill > /dev/null 2>&1
}


#######################################
# Connects to a openvpn server. Requires passwordless sudo to run in bg with &
# GLOBALS:
#   VPN_CONFIG_FOLDER
# ARGUMENTS:
#   NONE
#######################################
function connect_vpn {

	local wait_time

	if [[ $VPN_CONFIG_FOLDER == '' ]]
	then
			echo 'Please add variable VPN_CONFIG_FOLDER to .project_config. You can open .project_config ${GREEN}edit_config${DEFAULT}'
			return 1
	fi

	if [[ `pgrep -fa $VPN_CONFIG_FOLDER | wc -l` -lt 2 ]]
	then
		echo "VPN is starting."

		sudo openvpn --cd $VPN_CONFIG_FOLDER --config $VPN_FILE_NAME &> /dev/null &

		echo "Waiting for VPN to start."

		wait_time=$((SECONDS+5))
		start_time=$SECONDS

		while [[ `pgrep -fa openvpn | wc -l` -lt 2 && $SECONDS -le $wait_time  ]]
		do
			echo -ne "Time elapsed: $((SECONDS-start_time))s \r"
			sleep 1
		done

		if [[ `pgrep -fa $VPN_CONFIG_FOLDER | wc -l` -lt 2 ]]
		then
			echo ''
			echo ''
			echo "${GREEN}Enter password. <Enter> then <ctrl+z> to continue working.${DEFAULT}"
			fg %1
			bg %1
		fi
		echo ""
	else
		if (( info )); then
				echo 'VPN already running'
		fi
	fi
}

#######################################
# Disconnects and reconnects to the openvpn server.
# GLOBALS:
#	NONE
# ARGUMENTS:
#	NONE
#######################################
function reload_vpn {
	disconnect_vpn
	connect_vpn
}

#######################################
# Opens .project_config in gedit.
# GLOBALS:
#	NONE
# ARGUMENTS:
#	NONE
#######################################
function edit_config {
	gedit $HOME/.project_config
}

#######################################
# Reloads the config to refresh the variables.
# GLOBALS:
#	NONE
# ARGUMENTS:
#	NONE
#######################################
function reload_config {
	source $HOME/.project_config
}

#######################################
# Opens .project_config in gedit.
# GLOBALS:
#	NONE
# ARGUMENTS:
#	NONE
#######################################
function edit_config {
	gedit $HOME/.project_config
	reload_config
}

#######################################
# Opens the helper script in gedit.
# GLOBALS:
#	NONE
# ARGUMENTS:
#	NONE
#######################################
function edit_helper {
	gedit $HELPER_SOURCE
	reload_helper
}

#######################################
# Reloads the helper script in a new tab and closes current tab.
# GLOBALS:
#	NONE
# ARGUMENTS:
#	NONE
#######################################
function reload_helper {
	gnome-terminal --tab
	exit
}

#######################################
# Prints the folder path from base project.
# GLOBALS:
#	projects      : Associative array with the names and path of all sub-projects  
# ARGUMENTS:
#	$1            : Name of the project. Position Any. Optional.
#######################################
function show_folder {
	echo ${projects[$1]}
}

#######################################
# Clears the screen and prints helper info.
# GLOBALS:
#	NONE
# ARGUMENTS:
#	NONE
#######################################
function clear_with_info {
	clear
	helper_info
}

if (( info ))
then
	helper_info
fi

if (( vpn ))
then
	connect_vpn
fi
info=1
